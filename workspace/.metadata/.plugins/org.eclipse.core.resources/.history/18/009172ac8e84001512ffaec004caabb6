/**
 * PMP2, WS 2015/16
 * Gruppe: Jannes Volkens (jannes.volkens@haw-hamburg.de),
 * Leon Schlichting (leon.schlichting@haw-hamburg.de)
 * Aufgabe: Aufgabenblatt 2, Aufgabe 1
 */
package aufgabenblatt2;

import java.util.HashMap;
import java.util.function.BinaryOperator;

/**
 * Klasse Rechner, der die vier Grundrechenarten beherrscht.
 * 
 * @author Leon, Jannes
 */
public class Rechner implements IDoubleDoubleZuDouble {
  /**
   * HashMap die später gefüllt wird mit einer Operation und einem
   * Lambda-Ausdruck, der die Operation bestimmt.
   */
  HashMap<Operation, BinaryOperator<Double>> map = new HashMap<Operation, BinaryOperator<Double>>();

  /**
   * Enum Operation definiert die Grundrechenarten
   * 
   * @author Leon, Jannes
   *
   */
  public enum Operation {
	MUL, SUB, ADD, DIV
  }

  /**
   * Methode berechne() übergibt ein Element des Types Operation und zwei double
   * Werte als Parameter. Mit der Methode get() aus dem Interface
   * java.util.HashMap wird das Objekt, welches mit der übergebenen Operation
   * übereinstimmt zurückgegeben. Danach wird der Lambdaausdruck auf die beiden
   * Double werte angewendet.
   * 
   * @param operation
   * @param a
   * @param b
   * @return double
   */
  public double berechne(Operation operation, double a, double b) {
	return map.get(operation).apply(a, b);
  }

  /**
   * Konstruktor
   */
  public Rechner() {
	map.put(Operation.MUL, (a, b) -> a * b);
	map.put(Operation.SUB, (a, b) -> a - b);
	map.put(Operation.ADD, (a, b) -> a + b);
	map.put(Operation.DIV, (a, b) -> a / b);
  }

  @Override
  public double werteAus(double a, double b) {
	double erg1 = berechne(Operation.MUL, a, b);
	double erg = berechne(Operation.DIV, -a, b);
	return erg1 + erg;
  }
}